---

- name: Grafana package is available
  copy:
    src: grafana_4.4.1_amd64.deb
    dest: /root/grafana_4.4.1_amd64.deb

- name: Grafana is installed
  apt:
    deb: /root/grafana_4.4.1_amd64.deb
    state: present

- name: Grafana configuration is installed
  template:
    src: grafana.ini
    dest: /etc/grafana/grafana.ini
  notify: Reset Grafana

- name: Grafana directories for tasks exist
  file:
    path: "{{item}}"
    state: directory
    mode: 0700
  with_items:
  - /root/grafana-tasks
  - /root/grafana-tasks/requests
  - /root/grafana-tasks/status

- name: Grafana tasks requests are available
  template:
    src: requests/{{item}}.json
    dest: /root/grafana-tasks/requests/{{item}}.json
    mode: 0600
  with_items:
  - datasource
  - dashboard-host
  - user-organisation
  - user-account
  - user-role
  - admin-password
  notify: Reset Grafana

- meta: flush_handlers

- name: Grafana service is started and enabled
  service:
    name: grafana-server
    state: started
    enabled: yes

- name: Grafana is up
  wait_for:
    port: 3000

- name: Grafana datasource, dashboards, and users are configured
  shell: >
    curl
    -X {{item.method}} http://localhost:3000/{{item.endpoint}}
    --user admin:admin --header 'Content-Type: application/json'
    --data-binary @/root/grafana-tasks/requests/{{item.name}}.json
    --fail && touch /root/grafana-tasks/status/{{item.name}}.done
  args:
    creates: /root/grafana-tasks/status/{{item.name}}.done
  with_items:
  - { name: datasource,        endpoint: api/datasources,            method: POST  }
  - { name: dashboard-host,    endpoint: api/dashboards/db,          method: POST  }
  - { name: user-organisation, endpoint: api/orgs/1,                 method: PUT   }
  - { name: user-account,      endpoint: api/admin/users,            method: POST  }
  - { name: user-role,         endpoint: api/orgs/1/users/2,         method: PATCH }
  - { name: admin-password,    endpoint: api/admin/users/1/password, method: PUT   }
